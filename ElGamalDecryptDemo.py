import math
from decimal import Decimal
import decimal
import random
import KeyGen as KeyGen
import UTF8_Convert as UTF8
decimal.getcontext().prec = 1000
"""Curve25519: y^2=x^3+486662x^2+x
	Prinmzahl: 2^255- 19"""
a = 486662
b = 1
prim = Decimal(2**255 - 19)

def YCalc(x):
	y = Decimal(((x**3+ 486662 * x**2 + x)/1)**Decimal(0.5))
	return y

def XCalc(y):
	r = 0
	i = 0
	while r != y:
		r = YCalc(i)
		i +=1
		print(i)
	return i

def additionMG(p,q): 
	r = []
	if p[0] == 0 and p[1] == 0:
		return q
	if q[0] ==0 and q[1] == 0:
		return p
	if p!=q and p[1]!=-q[1]:
		x1 = Decimal(p[0])
		y1 = Decimal(p[1])
		x2 = Decimal(q[0])
		y2 = Decimal(q[1])
		Xr = Decimal(b*(x2*y1-x1*y2)**2/(x1*x2*(x2-x1)**2))
		Yr = Decimal((((2*x1 + x2 + a)*(y2 - y1)) / (x2 - x1)) - b*((y2 - y1)**3 / (x2 - x1)**3) - y1)
		r.append(Xr)
		r.append(Yr)
		return r
	if p[0] == q[0] and p[1] == -q[1]:
		Xr = Decimal(0)
		Yr = Decimal(0)
		r.append(Xr)
		r.append(Yr)
		return r
	if p == q:
		x = Decimal(p[0])
		y = Decimal(p[1])
		l = Decimal((3*x**2 + 2 * a * x + 1)/(2*y* b))
		Xr = Decimal(b * l**2 - a - 2*x)
		Yr = Decimal((x*3 + a )*l - b *l**3 - y)		
		r.append(Xr)
		r.append(Yr)
		return r
def multiplikation(p,n):
	if n % 2 == 0 and n != 0:
		r = []
		x = Decimal(p[0])
		y = Decimal(p[1])
		l = Decimal((3*x**2 + 2 * a * x + 1)/(2 * y * b))
		Xr = Decimal(b * l**2 - a - 2*x)
		Yr = Decimal((x*3 + a )*l - b * l**3 - y)	
		r.append(Xr)
		r.append(Yr)
		r = multiplikation(r,n/2)
		return r
	if n == 0:
		r = []
		r.append(0)
		r.append(0)
		return r
	if n % 2 == 1 and n != 1:
		zwischenwert = multiplikation(p,n-1)
		r = additionMG(p,zwischenwert)
		return r
	if n == 1:
		return p

cipher = '0.0008313867653037918018709156824913441635643799447013846207538940402694737987363225019167538961121046968398583088097749486834492777176499390669193592492647844872249351191925328789757047765587615616549230330527489734570040090501088407132859645573150945269798206590506218835805383702418407287830183625143163025649030813395358527930163077230458745944486058884274937476420064339642422666828876940782628733194081993393040000436220963167979440141983218833357717989132319265305821233328408922999772889840564294600617352803769607886863120619215559576853752356145348786678851219019700247591499513390073971649523312148430492546661087677778144409449704494818815714819442921903837004491775018090317844674647818143532043078664370717343916554981929575081639749157036465878186503187713280649793681191020560943452542812584341197086966881303412317652596716449644398621711142245245939645420390400230224858097233286834847901261270833226016487215736906869600223689964432441856444774381886297549567340549831914784232217323092v-0.580701374003051795937259447052858071086759127789352616220501558934459495754156752068178292192626659921676839911125241536282781569291307941707954298745117830114974586913645765294042713197523818127514677265148364259744864780183029753879738660504874403455562010875350747810115183673529377662010296522458817955384825277354089361430459602887585818715458858537299235434378821401387670606174934784332907044171309622481425153803220231117544876763164170796085281090252130623377893699988547613123524081812763080496607500735212742757559769479816580951376835752793749768395779178732938425243863300293540697384491020120271190271117255700998859948683676305717621741256641949950364209313412326317208794504187059082301411359304619015796218400728583957385510436256594784547313055627403446226044521486693454461866204001094203154949909760113224925271896716710338350004268315381335541575928347619975210579987701860250331391162412346384081885543757683526446364501475199110920854004592718350963057954645855823213821034u7177732956636574271107675465870422607240967259984649332794935.461137330124339600983691628918990016813726752987357848635359873257682365215442042590982032484896399845541262667521743847844194820805610510004072578825462209057929028352683772236746174538401595411012988111616101458729554383354238383909854171353382844751790332231791994476780716979799324196954656617903822777552703318869295671470565352595659090878038312106617892550016416846934494150744782903264000344803933825755658550182596003302019027570258356362371864253060230575748341882119520812951312371068416520154633202826481208735552413197173075225932921494491856425778642755604523261162061456520695184608414080928725872909926508751512222636435907321374466756417626429359924110823130666389057102793787000253709510589402086237967126831124960901690012821186771463149497301989193819388008855888447006221976104824472583643496412809093149723701864815820984952446361502365910577511196495695239719653582185775197257128241712795534082460042397899896685467'
password = 'das ist das passwort, welches zu kurz ist, du lappen, anscheinen sei er immernoch zu kurz. ich meine jetzt ernsthaft?'
def ElGamalDecrypt(cipher,password):
	C = [0,0]
	C[0] = Decimal(cipher.split('v')[0])
	zwischenwert = cipher.split('v')[1]
	C[1] = Decimal(zwischenwert.split('u')[0])
	d =  Decimal(zwischenwert.split('u')[1])
	x = int(KeyGen.KeyGen(password),16)
	c1 = multiplikation(C,x)[0]
	m1 = str(d/c1 % prim + 1)
	m1 = m1.split('.')
	m1 = int(m1[0])
	output = UTF8.UTFdeConvert(m1)
	return output
print(ElGamalDecrypt(cipher,password))

